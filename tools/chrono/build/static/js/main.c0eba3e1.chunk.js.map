{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","undefined","date","setDate","NaN","ellapsed","setEllapsed","handler","setHandler","enabledButtons","setEnabledButtons","lastMouseMove","setLastMouseMove","stateRef","useRef","current","twoDigits","i","slice","togglePlay","Date","reset","useEffect","window","addEventListener","_","ev","now","event","key","setTimeout","clearTimeout","setInterval","updateDate","className","isNaN","Math","floor","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAmHeA,MA/Gf,WAAgB,IAAD,EACWC,wBAASC,GADpB,mBACNC,EADM,KACAC,EADA,OAEmBH,mBAASI,KAF5B,mBAENC,EAFM,KAEIC,EAFJ,OAGiBN,mBAASI,KAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAI+BR,oBAAS,GAJxC,mBAINS,EAJM,KAIUC,EAJV,OAK6BV,wBAASC,GALtC,mBAKNU,EALM,KAKSC,EALT,KAMPC,EAAWC,mBAQjBD,EAASE,QAAUJ,EAEnB,IAAMK,EAAY,SAACC,GAAD,OAAQ,IAAMA,GAAGC,OAAO,IA2D1C,SAASC,IAELhB,EADED,OACMD,EAEA,IAAImB,MAIhB,SAASC,IACPlB,EAAQ,IAAIiB,MAGd,OArEAE,qBAAU,WACRC,OAAOC,iBACL,YACAC,YAAW,SAACC,GACVd,EAAiBQ,KAAKO,SAbO,MAgBjCJ,OAAOC,iBAAiB,SAAS,SAACI,GAChC,OAAQA,EAAMC,KACZ,IAAK,IACHR,IACA,MACF,IAAK,IACHF,UAOL,IAEHG,qBAAU,WACRZ,GAAkB,GAClBoB,YAAW,WACyBV,KAAKO,MAAQd,EAASE,QAnCjB,KAqCrCL,GAAkB,KArCmB,OAwCxC,CAACC,IAEJW,qBAAU,YAIV,WACMf,GAASwB,aAAaxB,GAC1BC,EACEwB,aAAY,WACV1B,EAAYc,KAAKO,MAAQzB,KACxB,MARL+B,KACC,CAAC/B,IAoCF,sBAAKgC,UAAW,aAAezB,EAAiB,GAAK,gBAArD,UACE,sBAAKyB,UAAW,SAAhB,WACIC,MAAM9B,IAAP,UAlBEW,EAAUoB,KAAKC,MAAMhC,EAAW,IAAO,GAAK,KAkB9C,YAtBEW,EAAUoB,KAAKC,MAAMhC,EAAW,IAAO,IAAM,IAAM,GAsBrD,YA1BEW,EAAUoB,KAAKC,MAAMhC,EAAW,KAAQ,IAAM,KA2B/CA,GAAD,cAEFI,GACC,sBAAKyB,UAAW,UAAhB,UACE,wBAAQI,QAASnB,EAAjB,SACGjB,EACC,mBAAGgC,UAAU,gBAEb,mBAAGA,UAAU,kBAGjB,wBAAQI,QAASjB,EAAjB,SACE,mBAAGa,UAAU,yBC/FVK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c0eba3e1.chunk.js","sourcesContent":["import './App.css'\nimport { useEffect, useRef, useState } from 'react'\nimport * as _ from 'lodash'\n\nfunction App() {\n  const [date, setDate] = useState(undefined)\n  const [ellapsed, setEllapsed] = useState(NaN)\n  const [handler, setHandler] = useState(NaN)\n  const [enabledButtons, setEnabledButtons] = useState(true)\n  const [lastMouseMove, setLastMouseMove] = useState(undefined)\n  const stateRef = useRef()\n\n  const HIDE_BUTTONS_IF_MOUSE_INACTIVE_FOR = 2000\n  const THROTTLE_MOUSE_EVENTS_TIME = 500\n\n  /* use stateRef to store the lastMouseMove \n                        and retrieve the up to date state value \n                        in the callback for hiding the buttons */\n  stateRef.current = lastMouseMove\n\n  const twoDigits = (i) => ('0' + i).slice(-2)\n\n  useEffect(() => {\n    window.addEventListener(\n      'mousemove',\n      _.throttle((ev) => {\n        setLastMouseMove(Date.now())\n      }, THROTTLE_MOUSE_EVENTS_TIME)\n    )\n    window.addEventListener('keyup', (event) => {\n      switch (event.key) {\n        case 'r':\n          reset()\n          break\n        case ' ':\n          togglePlay()\n          break\n        default:\n          break\n      }\n    })\n    // setDate(new Date())\n  }, [])\n\n  useEffect(() => {\n    setEnabledButtons(true)\n    setTimeout(() => {\n      let timeSpentSinceLastMouseMove = Date.now() - stateRef.current\n      if (timeSpentSinceLastMouseMove > HIDE_BUTTONS_IF_MOUSE_INACTIVE_FOR) {\n        setEnabledButtons(false)\n      }\n    }, HIDE_BUTTONS_IF_MOUSE_INACTIVE_FOR)\n  }, [lastMouseMove])\n\n  useEffect(() => {\n    updateDate()\n  }, [date])\n\n  function updateDate() {\n    if (handler) clearTimeout(handler)\n    setHandler(\n      setInterval(() => {\n        setEllapsed(Date.now() - date)\n      }, 100)\n    )\n  }\n\n  const seconds = () => {\n    return twoDigits(Math.floor(ellapsed / 1000) % 60 || 0)\n  }\n\n  const minutes = () => {\n    return twoDigits(Math.floor(ellapsed / 1000 / 60) % 60 || 0)\n  }\n\n  const hours = () => {\n    return twoDigits(Math.floor(ellapsed / 1000 / 60 / 60))\n  }\n\n  function togglePlay() {\n    if (date) {\n      setDate(undefined)\n    } else {\n      setDate(new Date())\n    }\n  }\n\n  function reset() {\n    setDate(new Date())\n  }\n\n  return (\n    <div className={'container' + (enabledButtons ? '' : ' hide-cursor')}>\n      <div className={'chrono'}>\n        {!isNaN(ellapsed) && `${hours()}:${minutes()}:${seconds()}`}\n        {!ellapsed && `00:00:00`}\n      </div>\n      {enabledButtons && (\n        <div className={'buttons'}>\n          <button onClick={togglePlay}>\n            {date ? (\n              <i className=\"fas fa-stop\"></i>\n            ) : (\n              <i className=\"fas fa-play\"></i>\n            )}\n          </button>\n          <button onClick={reset}>\n            <i className=\"fas fa-redo\"></i>\n          </button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}